on:
  push:
    branches:
      - master
      - develop
      - 'feature/**'
      - 'bug_fix/**'
      - 'bugfix/**'
      - 'maint/**'
  schedule:
    # run release on the 8th of every month to detect problems with new packages/R releases
    - cron:  '19 3 8 * *'

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.os }} (${{ matrix.config.r }})
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: RamsesDB_testing
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    strategy:
      fail-fast: false
      matrix:
        config:
          # container action is not supported on windows or macOS
          # - {os: windows-latest, r: 'release'}
          # - {os: macOS-latest, r: 'release'}
          - {os: ubuntu-20.04, r: '4.0.0'}
          - {os: ubuntu-20.04, r: 'release'}
          - {os: ubuntu-20.04, r: 'devel'}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: "https://packagemanager.posit.co/cran/__linux__/focal/latest"
      RSPM_ROOT: "https://packagemanager.posit.co"
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      CODECOVETOKEN: ${{ secrets.CODECOVETOKEN }}
      CI_Postgres: true

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}

      - uses: r-lib/actions/setup-pandoc@v2

      - name: Query dependencies
        run: |
          install.packages('remotes')
          install.packages('devtools')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Restore cached R packages
        if: runner.os != 'Windows'
        id: restore-r-packages
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          
      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')

      - name: Install dependencies
        run: |
          remotes::install_github("msberends/AMR", build = TRUE)
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("rcmdcheck")
        shell: Rscript {0}
        
      - name: Cache R packages
        if: runner.os != 'Windows'
        id: cache-r-packages
        uses: actions/cache/save@v3
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ steps.restore-r-packages.outputs.cache-primary-key }}
        
      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_REMOTE_: false
        run: |
          rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Code coverage
        if: github.ref == 'refs/heads/master' && github.event_name == 'push' && matrix.config.os == 'ubuntu-20.04' &&  matrix.config.r == 'release'
        run: covr::codecov(type = "all", quiet = FALSE, token = Sys.getenv("CODECOVETOKEN"))
        shell: Rscript {0}

      - name: Build pkgdown
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop') && github.event_name == 'push' && matrix.config.os == 'ubuntu-20.04' &&  matrix.config.r == 'release'
        run: pkgdown::build_site(new_process = TRUE)
        shell: Rscript {0}

      - name: Deploy to Firebase
        if: github.ref == 'refs/heads/master' && github.event_name == 'push' && matrix.config.os == 'ubuntu-20.04' &&  matrix.config.r == 'release'
        uses: w9jds/firebase-action@master
        with:
          args: deploy --only hosting
        env:
          PROJECT_ID: ramses-antibiotics
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      
      - uses: r-lib/actions/setup-tinytex@v2
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop') && github.event_name == 'push' && matrix.config.os == 'ubuntu-20.04' &&  matrix.config.r == 'release'

      - name: Install TeX
        run: tlmgr --version
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop') && github.event_name == 'push' && matrix.config.os == 'ubuntu-20.04' &&  matrix.config.r == 'release'

      - name: Build source and PDF manual
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop') && github.event_name == 'push' && matrix.config.os == 'ubuntu-20.04' &&  matrix.config.r == 'release'
        run: |
          devtools::install()
          devtools::build(".", vignettes = TRUE, path = "~")
          devtools::build_manual(".", path = "~")
        shell: Rscript {0}
        
      - uses: actions/upload-artifact@v3
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop') && github.event_name == 'push' && matrix.config.os == 'ubuntu-20.04' &&  matrix.config.r == 'release'
        with:
          name: Ramses package source
          path: ~/Ramses_[0-9].[0-9].[0-9].tar.gz
        
      - uses: actions/upload-artifact@v3
        if: (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop') && github.event_name == 'push' && matrix.config.os == 'ubuntu-20.04' &&  matrix.config.r == 'release'
        with:
          name: Ramses package manual
          path: ~/Ramses_[0-9].[0-9].[0-9].pdf
